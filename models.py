"""Pydantic models that mirror the Supabase schema.

* `orm_mode` は Supabase SDK では不要なため設定していません。
* Gemini 等の **Structured Output** で利用しやすいよう、
  すべてのフィールドに `Field` を付けて `description` を明示しています。
* 型ヒントは実運用想定に合わせシンプルに `int` / `str` / `bool` / `dict`。
  `int4range` は文字列 "[191,196)" の様に扱います (SDK 側で変換してください)。
"""

from __future__ import annotations

from typing import Dict, Optional

from pydantic import BaseModel, Field


# ---------------------------------------------------------------------------
# Top‑level: tests
# ---------------------------------------------------------------------------
class TestForm(BaseModel):
    id: Optional[int] = Field(
        None, description="primary key – generated by the database (BIGSERIAL)"
    )
    name: str = Field(
        ..., description="名前 / 識別用タイトル (e.g., 'TOEIC 2023 Form A')"
    )


# ---------------------------------------------------------------------------
# sections
# ---------------------------------------------------------------------------
class Section(BaseModel):
    id: Optional[int] = Field(None, description="primary key – BIGSERIAL")
    test_id: int = Field(..., description="FK → tests.id")
    label: str = Field(..., description="セクション名 (Reading, Listening …)")
    order_no: int = Field(..., description="テスト内の並び順 1,2,3…")


# ---------------------------------------------------------------------------
# parts
# ---------------------------------------------------------------------------
class Part(BaseModel):
    id: Optional[int] = Field(None, description="primary key – BIGSERIAL")
    section_id: int = Field(..., description="FK → sections.id")
    label: str = Field(..., description="Part 名 (Part 5 など)")
    question_format: str = Field(
        ..., description="問題形式 (short_blank / long_blank / comprehension 等)"
    )
    order_no: int = Field(..., description="セクション内の並び順 1,2,3…")


# ---------------------------------------------------------------------------
# passage_sets
# ---------------------------------------------------------------------------
class PassageSet(BaseModel):
    id: Optional[int] = Field(None, description="primary key - BIGSERIAL")
    part_id: int = Field(..., description="FK → parts.id")
    order_no: int = Field(..., description="Part 内の並び順 1,2,3…")
    question_range: str = Field(
        ..., description="設問番号の範囲を示す int4range 文字列表現 (例 '[191,196)')"
    )
    title: Optional[str] = Field(None, description="見出しや件名 (任意)")
    metadata: Optional[Dict] = Field(
        None, description="自由形式の追加メタデータ (JSONB)"
    )


# ---------------------------------------------------------------------------
# passages
# ---------------------------------------------------------------------------
class Passage(BaseModel):
    id: Optional[int] = Field(None, description="primary key – BIGSERIAL")
    passage_set_id: int = Field(..., description="FK → passage_sets.id")
    order_no: int = Field(..., description="Passage Set 内 1,2,3…")
    body: str = Field(..., description="本文テキスト (Markdown / plain text)")
    metadata: Optional[Dict] = Field(
        None, description="ページ番号, bbox, audio_url 等の JSONB"
    )


# ---------------------------------------------------------------------------
# questions
# ---------------------------------------------------------------------------
class Question(BaseModel):
    id: Optional[int] = Field(None, description="primary key – BIGSERIAL")
    passage_set_id: int = Field(..., description="FK → passage_sets.id")
    part_id: int = Field(..., description="冗長保持: FK → parts.id")
    number: int = Field(..., description="設問番号 101,132… (Part 内一意)")
    blank_index: Optional[int] = Field(
        None, description="Passage 内の空所順序。空所なし設問は null"
    )
    stem: str = Field(..., description="設問文または空所を含む文")
    answer_explanation: Optional[str] = Field(
        None, description="解説・根拠テキスト (任意)"
    )
    difficulty: Optional[str] = Field(
        None, description="難易度タグ (easy/medium/hard 等)"
    )
    attributes: Optional[Dict] = Field(
        None, description="topic, cefr_level など拡張属性 (JSONB)"
    )


# ---------------------------------------------------------------------------
# choices
# ---------------------------------------------------------------------------
class Choice(BaseModel):
    id: Optional[int] = Field(None, description="primary key – BIGSERIAL")
    question_id: int = Field(..., description="FK → questions.id")
    label: str = Field(..., description="選択肢ラベル (A/B/C/D …)")
    content: str = Field(..., description="選択肢テキスト")
    is_correct: bool = Field(..., description="正答フラグ")


# ---------------------------------------------------------------------------
# tags & mapping table (question_tags)
# ---------------------------------------------------------------------------
class Tag(BaseModel):
    id: Optional[int] = Field(None, description="primary key – BIGSERIAL")
    level1: str = Field(..., description="Skill 階層1")
    level2: Optional[str] = Field(None, description="Category 階層2")
    level3: Optional[str] = Field(None, description="Sub‑category 階層3")


class QuestionTag(BaseModel):
    question_id: int = Field(..., description="FK → questions.id")
    tag_id: int = Field(..., description="FK → tags.id")
